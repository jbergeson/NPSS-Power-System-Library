        // ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * May 1, 2018
// ****************************************************************************
// Revisions:
//  
// ****************************************************************************

//#include <InterpIncludes.ncp>
//#include "ElectricPort.prt"

class Motor extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	description = isA() + " Determines motor power";
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	
	real Current {
		value = 1.; IOstatus="input"; units=AMP;
		description = "Current";
	} 

	real CurrentAngle_Demand {
		value = 0; IOstatus="output"; units="kW";
		description = "Current Angle for the motor";
	}
	
	real Eff{
		value=1.; IOstatus="output"; units="none";
		description = "Adiabatic efficiency.  Equal to effDes during design, and effBase during off design.";
	}

	real effBase{
		value = 1.;  IOstatus ="output";  units = "none";
		description = "Adiabatic efficiency.  Calculated and set by S_map socket during off design.";
		
	}

	real effDes{
		value = 1.;  IOstatus = "input";  units = "none";
		description = "Adiabatic efficiency at design point.";
	} 
	
	real Loss_j {
		value = 0; //IOstatus=OUTPUT; units="kW";
		description = "Motor Loss";
	}

	real Loss_r {
		value = 0; //IOstatus=OUTPUT; units="kW";
		description = "Motor Loss";
	}

	real Mass {
		value=1.; IOstatus="output"; units="kg";
		description = "Mass output of the motor";
	}

	real motorResistance {
		value = 1.; IOstatus="output"; units= "kW";
		description = "Resistance of the motor based on losses";
	} 

	real Ndes{
		value = 1.;  IOstatus = "output";  units = "rpm";
		description = "rotational speed at design";
	}

	real Pout{
		value = 5261.;  IOstatus = "output";  units = "kW";
		description = "Power out of the motor";
	}

	real Pin{
		value = 1.;  IOstatus = "output";  units = "kW";
		description = "Power in to the motor";
	}

	real powerfactor {
		value = 1; //IOstatus=OUTPUT; units="kW";
		description = "Motor Loss";
	}
	
	real SpecificPower {
		value = 13; IOstatus="input"; //units=;
		description = "Power to Weight ratio for the motor";
	}
	
	real Speed{
		value=1.; IOstatus="input"; units=RPM;
		description = "Propulsor Speed";
	}

	real trq{
		value=1.; IOstatus="output"; units=FT_LBF;
		description = "Propulsor Torque";
	}

	real trqDes{
		value = 1.;  IOstatus = "output";  units = FT_LBF;
		description = "Torque at design";
	}

	real trqTemp{
		value = 1.;  IOstatus = "output";  units = FT_LBF;
		description = "Temporary torque which the solver drives to match actual torque";
	}

	real Vreal{
		value = 1000.;  IOstatus = "output";  //units = "";
		description = "Real portion of voltage";
	}

	real Vimag{
		value = -1.;  IOstatus = "output";  //units = "";
		description = "Imaginary portion of voltage";
	}
	
	//------------------------------------------------------------
	//   ******* OPTION VARIABLE SETUP *******
	//------------------------------------------------------------

	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
	}

	real V;
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------
	
	// FLUID PORTS

	// FUEL PORTS

	// BLEED PORTS

	// THERMAL PORTS

	// MECHANICAL PORTS

	ShaftOutputPort Sh_O {
		description = "Mechanical connection to the shaft";
	}
	
	// ELECTRICAL PORTS

	ElectricPort EP_I {
		description = "Electric Port";
	}

	// FLOW STATIONS

	// SOCKETS

	Socket S_map{
		allowedValues = {"effBase"}
		description = "Socket to calculate motor map performance";
		//socketType = "MOTOR_GENERATOR_MAP";
		socketType = "TURBINE_EFFICIENCY_MAP";
	}

	// TABLES
	
	//------------------------------------------------------------
	// ******* INTERNAL SOLVER SETUP *******
	//------------------------------------------------------------

	//------------------------------------------------------------
	//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
	//------------------------------------------------------------

	Independent motor_trq{
		varName = "trq";
		autoSetup = TRUE;
	}

	Dependent match_pwr{
		eq_lhs = "Pin";
		eq_rhs = "Pout / Eff";
	}

	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------

	void variableChanged(string name, any oldVal){
		if(name == "switchDes"){
			if(switchDes == DESIGN){
				//ind_trqTemp.autoSetup = FALSE;
				//dep_trq_map.autoSetup = FALSE;
				//match_pwr.autoSetup = FALSE;
			}
			if(switchDes == OFFDESIGN){
				//effDes.IOstatus = "output";
				//ind_trqTemp.autoSetup = TRUE;
				//dep_trq_map.autoSetup = TRUE;
				//match_pwr.autoSetup = TRUE;
			}
		}
	} // end variableChanged()

	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	
	void calculate() {
		
		Speed=Sh_O.Nmech;
		Current = EP_I.I.r;
		
		if ( switchDes == "DESIGN" ){
			/*****************************
			On-Design
			*****************************/

			Eff = effDes;

			// Compute mass based on assumed specific power.
			Mass= Pout / SpecificPower;

			// get design values 
			Ndes = Speed;
			trqDes = ( C_HP_PER_RPMtoFT_LBF * (Pout/ 0.745699872) / Speed );
			trqTemp = trqDes;	

			// set torque
			//trq = ( C_HP_PER_RPMtoFT_LBF * (Pout/ 0.745699872) / Speed );	
			Pout = (trq / C_HP_PER_RPMtoFT_LBF) * 0.745699872 * Speed;
			Sh_O.trq=trq;

			//set efficiency value
			if(!S_map.isEmpty()){
				S_map.execute();
			}
			else{
				effBase = effDes;
			}
		
			Eff = effBase;
			Pin = Pout / Eff;

			// Calculate Current
			V = EP_I.V.r;
			Current = Pin * 1000. / V;

			// Calculate Losses
			Loss_r=Pin * (1.0 / Eff - 1.0);
			Loss_j=sqrt((Pin / powerfactor)**2 - Pin**2);

			// determine resistance 
			motorResistance =  Loss_r / 3 / Current**2;

		}

		if ( switchDes == "OFFDESIGN" ){	
			//*****************************
			// Off-Design
			//*****************************
	
			//trq = ( C_HP_PER_RPMtoFT_LBF * (Pout/ 0.745699872) / Speed );	
			Pout = (trq / C_HP_PER_RPMtoFT_LBF) * 0.745699872 * Speed;
			trqTemp = trq;
			Sh_O.trq=trq;

			//set efficiency value
			if(!S_map.isEmpty()){
				S_map.execute();
			}
			else{
				effBase = effDes;
			}
		
			Eff = effBase;
			Pin = Pout / Eff;

			// Calculate Current
			V = EP_I.V.r;
			Current = Pin * 1000. / V;

			// Calculate loss
			Loss_r = 3 * Current**2 * motorResistance;
			Loss_j=sqrt((Pin / powerfactor)**2 - Pin**2);
		}
		
		EP_I.setIVRMS(Current, EP_I.I.j, EP_I.V.r, EP_I.V.j);

		CurrentAngle_Demand = EP_I.VLN.phaseDeg - acos(powerfactor) * 180/PI;

		

	} // end calculation section	
	
} // end the Motor element class
