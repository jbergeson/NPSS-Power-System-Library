/*******************************************************************************
© Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
© 2008-2013 NPSS® Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS® software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/

#ifndef __ENODE__
#define __ENODE__

#include <InterpIncludes.ncp>

class Bus extends Element{
	
	//------------------------------------------------------------
//   ******* OPTION VARIABLE SETUP *******
//------------------------------------------------------------

  Option switchDes {
    allowedValues = { DESIGN, OFFDESIGN }
    description = "Design mode switch indicator [ DESIGN / OFFDESIGN ]";
    rewritableValues = FALSE;  // Enables converter optimization.
  }
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------
	
	// FLUID PORTS
	
	
	// FUEL PORTS
	
	// BLEED PORTS
	
	// THERMAL PORTS

	//ELECTRICAL PORTS 

	string Eports[];
	Eports.ptrType = "ElectricPort";
	Eports.internal = TRUE;
	Eports {
		description = "Array of Electric ports";
		ptrType = "ElectricPort";
	}
	
	// FLOW STATIONS
	
	// SOCKETS
	
	//------------------------------------------------------------
	// ******* INTERNAL SOLVER SETUP *******
	//------------------------------------------------------------  
	
	//------------------------------------------------------------
	//  ******  ADD SOLVER INDEPENDENTS & DEPENDENT  ******
	//------------------------------------------------------------
	Independent ind_Vreal { 
		varName = "VrealRMS"; 
		autoSetup = TRUE;
		indepRef = "1200";
		
		description = "Varies the volume total pressure";
	}
	/*
	Independent ind_Vimag { 
		varName = "VimagRMS"; 
		autoSetup = TRUE;
		indepRef = "1200";
		description = "Varies the volume total specific enthalpy";
	}
	*/
	Dependent dep_Ireal{
		eq_lhs = "Inet.rRMS";  
		eq_rhs = "0.0";
		autoSetup = TRUE;
	}
	/*
	Dependent dep_Iimag{
		eq_lhs = "Inet.jRMS";  
		eq_rhs = "0.";
		autoSetup = TRUE;
	}
	*/
	
	ComplexNumber Inet;
	
	real frequency;
	real VrealRMS;
	VrealRMS = 1.;
	real VimagRMS;
	
	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------
	
	void variableChanged( string name, any oldVal ) {

    if ( name == "switchDes" ) {

      if ( switchDes == "DESIGN" ) {
		  //hello
      }   
      else if ( switchDes == "OFFDESIGN" ) {
        //hi
      }
    }
  }

	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	
	void calculate() {
				
		//---------------------------------------------------------
		//  Sum up the current components at node
		//  solver will drive to zero
		//----------------------------------------------------------
		
		//set initial value of net current to be zero

		Inet.setrj( 0., 0. );
		int i;
		for (i=0; i<Eports.entries(); i = i + 1) {
			
			string Iname;
			
			if ( Eports[i]->hasInterface( "ElectricInputPort" )){
				Iname =Eports[i]+".I"; 
				Inet.plus( Iname );	
			}
			else if(Eports[i]->hasInterface( "ElectricOutputPort" )){
				Iname =Eports[i]+".I"; 
				Inet.minus( Iname );	
				}
			    		    
			}
		
	
	}
    
	//------------------------------------------------------------
	// ******* PREPASS FUNCTION *******
	//------------------------------------------------------------
	void prePass() {
	    //---------------------------------------------------
		// push the voltage from the solver out to the ports
		//---------------------------------------------------
        int i;		
		for (i=0; i<Eports.entries(); i = i + 1) {
			Eports[i]->frequency= frequency;	
			Eports[i]->setIVRMS(0., 0., VrealRMS, VimagRMS);
			
		}
	}
	
	// -------------------------------------------------------------
	//   ************ POSTCREATE FUNCTION **********
	// -------------------------------------------------------------
	void postcreate( string name ) {
		//------------------------------------------------------------    
		// allow for the creation of ports at run time
		//------------------------------------------------------------
		if ( name->hasInterface( "ElectricPort" )) {
			Eports.append(name);
			Eports[Eports.entries()-1]->(V = parent.getName() + ".V");
		}
		
	}
	
}


#endif
