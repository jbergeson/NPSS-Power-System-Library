/*******************************************************************************
© Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
© 2008-2013 NPSS® Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS® software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/

#ifndef __ENODE__
#define __ENODE__

#include <InterpIncludes.ncp>

class Bus extends Element{

	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + "is a bus element that controls the voltages at each port to 
	drive the sum of the currents to zero.";
	
	usageNotes = isA() + "
	-Add this element any time you are connecting two electrical elements together.
	It will set the voltages in the system and balance everything out.
	";
	
	background = "";

	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------

	ComplexNumber Inet; //This is the sum of the currents going through the node
	
	real frequency{
		value = 60.;  IOstatus = OUTPUT;  units = HERTZ;
		description = "This needs modification, currently the bus isn't able to pass frequency for AC flows";

	}
	real VrealRMS{
		value = 1150.;  IOstatus = OUTPUT;  units = "V";
		description = "Real portion of the voltage, controlled by the solver to balance real current";
	}

	real VimagRMS{
		value = 1000.;  IOstatus = OUTPUT;  units = "V";
		description = "Imaginary portion of the voltage, controlled by the solver to balance imaginary current";
	}
	
//------------------------------------------------------------
//   ******* OPTION VARIABLE SETUP *******
//------------------------------------------------------------

  Option switchDes {
    allowedValues = { DESIGN, OFFDESIGN }
    description = "Design mode switch indicator [ DESIGN / OFFDESIGN ]";
    rewritableValues = FALSE;  // Enables converter optimization.
  }
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------
	
	// FLUID PORTS
	
	
	// FUEL PORTS
	
	// BLEED PORTS
	
	// THERMAL PORTS

	//ELECTRICAL PORTS 

	string Eports[];
	Eports.ptrType = "ElectricPort";
	Eports.internal = TRUE;
	Eports {
		description = "Array of Electric ports";
		ptrType = "ElectricPort";
	}
	
	// FLOW STATIONS
	
	// SOCKETS
	
	//------------------------------------------------------------
	// ******* INTERNAL SOLVER SETUP *******
	//------------------------------------------------------------  
	
	//------------------------------------------------------------
	//  ******  ADD SOLVER INDEPENDENTS & DEPENDENT  ******
	//------------------------------------------------------------
	Independent ind_Vreal { 
		varName = "VrealRMS"; 
		autoSetup = TRUE;
		indepRef = "1200";
		
		description = "Varies the real portion of port voltage";
	}
	/*
	Independent ind_Vimag { 
		varName = "VimagRMS"; 
		autoSetup = TRUE;
		indepRef = "1200";
		description = "Varies the imaginary portion of port voltage";
	}
	*/
	Dependent dep_Ireal{
		eq_lhs = "Inet.rRMS";  
		eq_rhs = "0.0";
		autoSetup = TRUE;
		description = "Forces the real currents into the bus to equal the real currents out of it";
	}
	/*
	Dependent dep_Iimag{
		eq_lhs = "Inet.jRMS";  
		eq_rhs = "0.";
		autoSetup = TRUE;
		description = "Forces the imaginary currents into the bus to equal the imaginary currents out of it";
	}
	*/
	
	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------
	
	void variableChanged( string name, any oldVal ) {

    if ( name == "switchDes" ) {

      if ( switchDes == "DESIGN" ) {
      }   
      else if ( switchDes == "OFFDESIGN" ) {
      }
    }
  }

	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------
	
	void calculate() {
				
		//---------------------------------------------------------
		//  Sum up the current components at node
		//  solver will drive to zero
		//----------------------------------------------------------
		
		//set initial value of net current to be zero
		Inet.setrj( 0., 0. );
		
		//sum currents over all ports (ideally, all ports are input ports, however, we don't have negative current going away in port yet)
		int i;
		for (i=0; i<Eports.entries(); i = i + 1) {
			
			string Iname;
			
			if ( Eports[i]->hasInterface( "ElectricInputPort" )){
				Iname =Eports[i]+".I"; 
				Inet.plus( Iname );	
			}
			else if(Eports[i]->hasInterface( "ElectricOutputPort" )){
				Iname =Eports[i]+".I"; 
				Inet.minus( Iname );	
				}
			    		    
			}
		
	
	}
    
	//------------------------------------------------------------
	// ******* PREPASS FUNCTION *******
	//------------------------------------------------------------
	void prePass() {
	  //---------------------------------------------------
		// push the voltage from the solver out to the ports
		//---------------------------------------------------
    int i;		
		for (i=0; i<Eports.entries(); i = i + 1) {  //Need to find a way to push a port's frequency properly, need to vary VimagRMS as well
			Eports[i]->frequency= frequency;	
			Eports[i]->setIVRMS(0., 0., VrealRMS, 0);
			
		}
	}
	
	// -------------------------------------------------------------
	//   ************ POSTCREATE FUNCTION **********
	// -------------------------------------------------------------
	void postcreate( string name ) {
		//------------------------------------------------------------    
		// allow for the creation of ports at run time
		//------------------------------------------------------------
		if ( name->hasInterface( "ElectricPort" )) {
			Eports.append(name);
			Eports[Eports.entries()-1]->(V = parent.getName() + ".V");
		}
		
	}
	
}


#endif
