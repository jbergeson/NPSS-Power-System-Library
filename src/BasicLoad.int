// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * February 14, 2019
// ****************************************************************************

class BasicLoad extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + "acts as a load on the system and calculates
	current based on a voltage drop across the load.";
	
	usageNotes = isA() + "
	-This element has three input values on design. They are real resistance 'R', 
	inductance 'L', and length of load 'length'. It is recommended that values are 
	input for these, because otherwise the solver may struggle to converge. 

	-This element needs to know the voltages on both ends of it in order to calculate
	the current. As a result, make sure sure that the solver sequence is set up in 
	such a way that the voltage is set in the ports on either end of this element before 
	the element is executed.
	";
	
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------	
	ComplexNumber dV; //Difference in voltage on two ends of load
	ComplexNumber Z;  //Complex resistance in the load
	ComplexNumber I;  //Complex current through the load
	real R{
		value = 1.;  IOstatus = INPUT;  units = OHM;
		description = "Real portion of resistance in load, input by user";
	}

	real L{
		value = 1.;  IOstatus = INPUT;  units = HENRY;
		description = "Inductance of load, input by user";
	}

	real length{
		value = 1.;  IOstatus = INPUT;  //unsure if the units are feet or meters, consult Jeff Csank or Dave Sadey
		description = "Length of the load, input by user";
	}

	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------

	void variableChanged( string name, any oldVal ) {
		if (name =="switchDes") {
			if (switchDes == DESIGN) {
				R.IOstatus = INPUT;
				L.IOstatus = INPUT;
				length.IOstatus = INPUT;
			}
			else if (switchDes == OFFDESIGN) {
				R.IOstatus = OUTPUT;
				L.IOstatus = OUTPUT;
				length.IOstatus = OUTPUT;
			}
		}
	} // end variableChanged()
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------	
	ElectricInputPort EP_I {
		description = "Electric port";
	}
	
	ElectricOutputPort EP_O {
		description = "Electric Port";
	}
	
	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
		trigger=FALSE;
	}
	
	
	void calculate() {		
		
		//Calculate current from voltage drop
		Z.setrj( R,  L*(2*PI*EP_I.frequency) );
		dV.copy( "EP_I.VLN" );
		dV.minus( "EP_O.VLN" );
		I.copy( "dV" );
	    I.div( "Z" );

		//Set conditions in the port
		EP_O.frequency=EP_I.frequency;
		EP_I.setIVRMS( I.rRMS, I.jRMS, EP_I.V.rRMS, EP_I.V.jRMS ); 	
		EP_O.setIVRMS( I.rRMS, I.jRMS, EP_O.V.rRMS, EP_O.V.jRMS ); 						
	}
}