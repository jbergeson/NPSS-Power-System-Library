// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * April 26, 2018
// ****************************************************************************

//#include <InterpIncludes.ncp>
class Generator extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + " Determines power for a Generator";
	
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	
	real Current {
		value = 1.; IOstatus="input"; units="A";
		description = "Current";
	} 
	
	real CurrentAngle {
		value = 0; IOstatus="input"; units="deg";
		description = "Current Angle";
	}

	real Eff{
		value=1.; IOstatus="input"; units = "none";
		description = "Projected Efficiency of the Cable";
	}

	real effBase{
		value = 1.;  IOstatus = "output";  units = "none";
		description = "Adiabatic efficiency.  Calculated and set by S_map socket during off design.";	
	}

	real effDes{
		value = 1.;  IOstatus = "input";  units = "none";
		description = "Adiabatic efficiency at design point.";
	}
	
	real frequency {
		value = 0; IOstatus="input"; units="deg";
		description = "Generator Frequency";
	}

	real genResistance {
		value = 1; IOstatus="input"; units= "kW";
		description = "Resistance of Generator (based on efficiency)";
	}

	real Loss_j {
		value = 0; IOstatus="output"; units="kW";
		description = "Generator Loss";
	}

	real Loss_r {
		value = 0; IOstatus="output"; units="kW";
		description = "Generator Loss";
	}

	real Mass {
		value=1.; IOstatus="output"; units="kg";
		description = "Mass output of the Generator";
	}

	real Ndes{
		value = 1.;  IOstatus = "output";  units = "rpm";
		description = "rotational speed at design";
	}
	
	real Pout {
		value = 1.;  IOstatus = "output";  units = "kW";
		description = "Power out of the generator";
	}

	real Pin {
		value = 1.;  IOstatus = "input";  units = "kW";
		description = "Power in to the generator";
	}

	real SpecificPower {
		value = 13; IOstatus="input"; //units=KW_PER_KG;
		description = "Power to Weight ratio for the Generator";
	}

	real Speed {
		value = 1.;  IOstatus = "input";  units = "rpm";
		description = "Shaft/generator speed";
	}

	real trq {
		value = 1.;  IOstatus = "output";  units = "ft*lbf";
		description = "Torque from shaft";
	}

	real trqDes{
		value = 1.;  IOstatus = "output";  units = "ft*lbf";
		description = "Torque at design";
	}

	real trqTemp{
		value = 1.;  IOstatus = "output";  units = "ft*lbf";
		description = "Temporary torque which the solver drives to match actual torque";
	}

	real Vbus_LL {
		value = 0; IOstatus="input"; units="V";
		description = "Bus voltage (off-design)";
	} 
	
	//------------------------------------------------------------
	//   ******* OPTION VARIABLE SETUP *******
	//------------------------------------------------------------

	Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
	}
	
	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------

	// FLUID PORTS

	// FUEL PORTS

	// BLEED PORTS

	// THERMAL PORTS

	// 	ELECTRICAL PORTS

	ElectricPort EP_O {
		description = "Electric port";
	}
	
	//MECHANICAL PORTS
	
	ShaftOutputPort Sh_O {
		description = "Mechanical connection to the turbine";
	}

	// FLOW STATIONS 

	// SOCKETS

	Socket S_map{
		allowedValues = {"effBase"}
		description = "Socket to calculate motor map performance";
		//socketType = "MOTOR_GENERATOR_MAP";
		socketType = "TURBINE_EFFICIENCY_MAP";
	}

	// TABLES
	
	//------------------------------------------------------------
	// ******* INTERNAL SOLVER SETUP *******
	//------------------------------------------------------------

	//------------------------------------------------------------
	//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
	//------------------------------------------------------------

	Independent ind_trqTemp {
		varName = "trqTemp";
		description = "Varies temporary torque to match calculated torque for map";
	}

	Dependent dep_trq_map {
		eq_lhs = "trqTemp";
		eq_rhs = "trq";
	}

	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------

	void variableChanged( string name, any oldVal ) {
		if (name =="switchDes") {
			if (switchDes == DESIGN) {
				ind_trqTemp.autoSetup = FALSE;
				dep_trq_map.autoSetup = FALSE;
			}
			else if (switchDes == OFFDESIGN) {
				effDes.IOstatus = "output";
				ind_trqTemp.autoSetup = TRUE;
				dep_trq_map.autoSetup = TRUE;
			}
		}
	} // end variableChanged()
	
	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------

	void calculate() {
		EP_O.setIVRMS( EP_O.I.r, EP_O.I.j , Vbus_LL,  EP_O.V.j );
		real powerfactor=1.0;
		real Vbus=0;
		
		Speed = Sh_O.Nmech;
		Pout = EP_O.S.r;
		Current = EP_O.I.mag;

		if (switchDes == "DESIGN" ){
			/****************************
			On-design
			****************************/

			Eff = effDes;
		
			// compute power to the generator
			Pin = Pout / Eff;

			// get design values 
			Ndes = Sh_O.Nmech;
			trqDes = C_HP_PER_RPMtoFT_LBF * (Pin / 0.745699872) / Ndes;
			trqTemp = trqDes;
			trq = trqDes;
		
			// determine loss in the generator
			Loss_r = Pin - Pout;
			Loss_j= sqrt((Pin / powerfactor)**2 - Pin**2);
		
			// determine resistance 
			genResistance =  Loss_r / 3 / Current**2;
		
			// Compute mass based on assumed specific power.  Both Mass
			// and loses are based on output power (Power Sent)
			Mass = Pout / SpecificPower;
		}

		//set efficiency value
		if(!S_map.isEmpty()){
			S_map.execute();
		}
		else{
			effBase = effDes;
		}
		Eff = effBase;

		if (switchDes == "OFFDESIGN" ){
			/****************************
			Off-design
			****************************/
			
			// Supply power is load power + losses
			Pin = Pout / Eff;
			
			// determine loss in the generator
			Loss_r = 3 * Current**2 * genResistance;
			Loss_j=sqrt((Pin / powerfactor)**2 - Pin**2);
		}
		
		// Generator / Turbine Engine shaft connection
		trq =  C_HP_PER_RPMtoFT_LBF * (Pin / 0.745699872) / Speed;
		Sh_O.trq = -trq;	
	}
	/*void prePass(){
		
		//real Vbus = Vbus_LL / sqrt(3.);
		EP_O.frequency = frequency;
		
	}
	*/
}


