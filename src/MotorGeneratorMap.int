#ifndef __MOTOR_GENERATOR_MAP__
#define __MOTOR_GENERATOR_MAP__


#include <InterpIncludes.ncp>

// Variables that exist in the parent Motor or Generator element 
// and are used in this subelement.
extern real Speed;
extern real trqTemp;
extern real Ndes;
extern real trqDes;
extern real effDes;

// Variables that exist in the parent Motor or Generator element
// and are set by this subelement.
extern real effBase;

class MotorGeneratorMap extends Subelement{

    //------------------------------------------------------------
    //     ******* DOCUMENTATION *******
    //------------------------------------------------------------

    title = "";

    description = isA() + "handles the determination of efficiency for a generator or motor. It performs calls to a map that determines the efficiency as a function of rotational speed and torque.";

    usageNotes = isA() +
    "
    
    -Put description of what element does, how it does it, and how to use it here.
    ";

    background = "";

    //------------------------------------------------------------
    //     ******* SETUP VARIABLES ********
    //------------------------------------------------------------

    real effMap{
        value = 1.;  IOstatus = OUTPUT; units = NONE;
        description = "Efficiency of motor or generator from unscaled map TB_eff.";
    }
    real effMapDes{
        value = 1;  IOstatus = OUTPUT;  units = NONE;
        description = "Efficiency of motor or generator at design point. Returned from unscaled map TB_eff at trqMapDes and NmapDes.";
    }
    real Nmap{
        value = 0.;  IOstatus = OUTPUT;  units = RPM;
        description = "Speed scaled to map.  Equal to NmapDes during design, and calculated as N / s_Ndes during off-design.";
    }
    real NmapDes{
        value = 0.;  IOstatus = INPUT;  units = RPM;
        description = "Speed scaled to map at design point. Set by map itself.";
    }
    real trqMap{
        value = 0.;  IOstatus = OUTPUT;  units = FT_LBF;
        description = "Torque scaled to map.  Equal to trqMapDes during design, and calculated at T / s_trqDes during off-design.";
    }
    real trqMapDes{
        value = 0.;  IOstatus = INPUT;  units = FT_LBF;
        description = "Torque scaled to map at design point. Set by map itself.";
    }
    real s_effDes{
        value = 1.;  IOstatus = OUTPUT;  units = NONE;
        description = "Efficiency map scalar.  Relates actual design efficiency to scaled design efficiency (effDes / effMapDes)";
    }
    real s_Ndes{
        value = 1.;  IOstatus = OUTPUT;  units = NONE;
        description = "Speed map scalar.  Relates actual design speed to scaled design speed (Ndes / NmapDes)";
    }
    real s_trqDes{
        value = 1.;  IOstatus = OUTPUT;  units = NONE;
        description = "Torque map scalar. Relates actual design torque to scaled design (trqDes / trqMapDes)";
    }

    //------------------------------------------------------------
    //   ******* OPTION VARIABLE SETUP *******
    //------------------------------------------------------------

    Option switchDes{
        allowedValues = {DESIGN, OFFDESIGN};
        description = "Determines if the subelement is in design or off-design mode";
        rewritableValues = FALSE; 
    } 

    //------------------------------------------------------------
    // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
    //------------------------------------------------------------

    // FLUID PORTS

    // FUEL PORTS

    // BLEED PORTS
     
    // THERMAL PORTS

    // MECHANICAL PORTS

    // FLOW STATIONS

    // SOCKETS
    // addInterface("MOTOR_GENERATOR_MAP"); // compatible with the Motor and Generator elements' S_map socketType (MOTOR_GENERATOR_MAP currently does not exist as a socketType)
    addInterface("TURBINE_EFFICIENCY_MAP"); // compatible with the Motor and Generator elements' S_map socketType

    Socket TB_eff{
        description = "Efficiency vs. speed and torque.  A function or table with the name TB_eff must be declared at the subelement scope in order to fill this socket. The format is TB_eff(real Nmap, real trqMap), and returns effMap.";
        socketType = "Function";
        required = TRUE;
        argTypes = {"real", "real"}
        returnType = "real";
    } 

    // TABLES

    //------------------------------------------------------------
    // ******* INTERNAL SOLVER SETUP *******
    //------------------------------------------------------------

    //------------------------------------------------------------
    //  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
    //------------------------------------------------------------

    //------------------------------------------------------------
    // ******* VARIABLE CHANGED METHODOLOGY *******
    //------------------------------------------------------------

    void variableChanged(string name, any oldVal){

        if(name == "switchDes"){
            if(switchDes == DESIGN){

                NmapDes.IOstatus = INPUT;
                trqMapDes.IOstatus = INPUT;
                s_effDes.IOstatus = OUTPUT;
                s_Ndes.IOstatus = OUTPUT;
                s_trqDes.IOstatus = OUTPUT;
            } // end of DESIGN
            else if(switchDes == OFFDESIGN){

                NmapDes.IOstatus = OUTPUT;
                trqMapDes.IOstatus = OUTPUT;
                s_effDes.IOstatus = INPUT;
                s_Ndes.IOstatus = INPUT;
                s_trqDes.IOstatus = INPUT;
            } // end of OFFDESIGN
        } //end of switchDes
    } // end of variableChanged
    
    //------------------------------------------------------------
    //   ******* PERFORM ENGINEERING CALCULATIONS *******
    //------------------------------------------------------------

    void calculate(){

        if(switchDes == DESIGN){

            // set map values at design point
            Nmap = NmapDes;
            trqMap = trqMapDes;
            effMap = TB_eff(trqMap, Nmap);
            effMapDes = effMap;

            // calculate map scalars
            s_effDes = effDes / effMapDes; // effDes is from parent element, effMapDes was found on map
            s_Ndes = Ndes / NmapDes; // Ndes is from parent element, NmapDes is from map input value
            s_trqDes = trqDes / trqMapDes;// trqDes is from parent element, trqMapDes is from map input value

        } // end of DESIGN calculations

        // OFFDESIGN calculations:
        // calculate map values
        Nmap = Speed / s_Ndes;
        trqMap = trqTemp / s_trqDes;
        effMap = TB_eff(trqMap, Nmap);
        
        //set efficiency to send to parent element
        effBase = effMap * s_effDes;

    } // end of calculations
} // end of MotorGeneratorMap subelement class

#endif