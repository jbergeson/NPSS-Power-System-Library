// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// * Jeffrey Csank, David Sadey, Tom Lavelle
// * March 18, 2019
// ****************************************************************************

//#include <InterpIncludes.ncp>
class Rectifier extends Element {
	
	//------------------------------------------------------------
	//     ******* DOCUMENTATION *******
	//------------------------------------------------------------
	
	title = "";
	
	description = isA() + " Determines power for a Rectifier";
	
	usageNotes = isA() + "- NOTE TO USERS: This file....";
	
	background = "";
	
	//------------------------------------------------------------
	//     ******* SETUP VARIABLES ********
	//------------------------------------------------------------
	
	ComplexNumber Sdc;
	//ComplexNumber Idc;
	//ComplexNumber Iac;
	ComplexNumber Vdc;
		
	real Eff {
		value = 1.0; IOstatus="input"; units= NONE;
		description = "Efficiency of the rectifier";
	}

	real effBase {
		value = 1.;  IOstatus = "output";  units = "none";
		description = "Adiabatic efficiency.  Calculated and set by S_map socket during off design.";
	}

	real effDes {
		value = 1.;  IOstatus = "input";  units = "none";
		description = "Adiabatic efficiency at design point.";
	}
	
	real frequency {
		value = 60.; IOstatus="input"; //units=;
		description = "Frequency of AC output power";
	}

	real pwrDes {
		value = 1.;  IOstatus = "input";  units = "kW";
		description = "Output power at design";
	}

	real pwrOut {
		value = 1.;  IOstatus = "output";  units = "kW";
		description = "Output power";
	}

	real Vimag {
		value = -1.; IOstatus="input"; //units=;
		description = "Rectifier Voltage (imaginary)";
	}
	
	real Vreal {
		value = 1000.; IOstatus="input"; //units=;
		description = "Rectifier Voltage (real)";
	}
	
	//------------------------------------------------------------
    //   ******* OPTION VARIABLE SETUP *******
    //------------------------------------------------------------

    Option switchDes {
		allowedValues = { "DESIGN", "OFFDESIGN" } ;
		description = "Determines if the element is in design or off-design mode";
		rewritableValues = FALSE;
	}

	

	//------------------------------------------------------------
	// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
	//------------------------------------------------------------

	// FLUID PORTS

    // FUEL PORTS

    // BLEED PORTS
     
    // THERMAL PORTS

    //ELECTRICAL PORTS

	ElectricPort EP_O {
		description = "Electric port";
	}
	
	ElectricPort EP_I {
		description = "Electric port";
	}

	// MECHANICAL PORTS

    // FLOW STATIONS

    // SOCKETS

    Socket S_map{
		allowedValues = {"effBase"}
		description = "Socket to calculate motor map performance";
		//socketType = "INVERTER_RECTIFIER_MAP";
		socketType = "TURBINE_EFFICIENCY_MAP";
	}

    // TABLES

	
	//------------------------------------------------------------
	//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
	//------------------------------------------------------------
	Independent ind_Vreal { 
		varName = "Vreal"; 
		//autoSetup = TRUE;
		indepRef = "1000";
		
		description = "Varies the real component of the inverter voltage";
	}
	
	Independent ind_Vimag { 
		varName = "Vimag"; 
		//autoSetup = TRUE;
		indepRef = "1000";
		description = "Varies the imaginary component of the inverter voltage";
	}
	
	Dependent dep_Power{
		eq_rhs="EP_I.S.rRMS * Eff";
		eq_lhs="EP_O.S.rRMS";
		//autoSetup=TRUE;
	}
	
	Dependent dep_phase{
		eq_rhs="EP_I.VLN.phaseDeg";
		eq_lhs="EP_I.I.phaseDeg";
		//autoSetup=TRUE;
	}

	Independent dc_current{
		varName = "Idc";
		description = "Varies the EP_O current so Pout = Pin / Eff";
		autoSetup = TRUE;
	}

	Dependent input_pwr{
		eq_lhs = "EP_O.S.r / Eff";
		eq_rhs = "EP_I.S.r";
		description = "Forces input power to match output power and efficiency";
		autoSetup = TRUE;
	}

	Independent ac_current{
		varName = "Iac";
		description = "Varies real portion of AC current to match input bus voltage";
		autoSetup = TRUE;
	}

	Dependent bus_voltage{
		eq_lhs = "EP_I.V.r * m";
		eq_rhs = "EP_O.V.r";
		autoSetup = TRUE;
	}

	//------------------------------------------------------------
	// ******* VARIABLE CHANGED METHODOLOGY *******
	//------------------------------------------------------------

	void variableChanged(string name, any oldVal){
		if(name == "switchDes"){
			if(switchDes == OFFDESIGN){
				effDes.IOstatus = "output";
			}
		}
	} // end variableChanged()

	//------------------------------------------------------------
	//   ******* PERFORM ENGINEERING CALCULATIONS *******
	//------------------------------------------------------------

	real Idc;
	Idc = 1000.;
	real Iac;
	Iac = 1000.;
	real m;
	m = 1;

	void calculate() {
		
		pwrOut = EP_O.S.rRMS;
		
		if (switchDes == "DESIGN" ){
			/****************************
			On-design
			****************************/
				
			
		}	
		else{
			//*****************************
			// Off-Design
			//*****************************
		}	

		/*
		//set efficiency value
		if(!S_map.isEmpty()){
			S_map.execute();
		}
		else{
			effBase = effDes;
		}
		Eff = effBase;*/
		Eff = effDes;

		//EP_O.frequency = frequency;
		EP_O.frequency = EP_I.frequency;
		EP_O.setIVRMS(Idc,EP_O.I.j,EP_O.V.r,EP_O.V.j);
		EP_I.setIVRMS(Iac,EP_I.I.j,EP_I.V.r,EP_I.V.j);
		//EP_I.setIVRMS(0,0,EP_O.V.mag * sqrt(2),0);
	}
}


